@using RSCG_Decorator;
@inherits RazorBlade.PlainTextTemplate<ClassData>;
@{
    string newClassName = Model.className + "_Decorator";
    string interfaces = "";
    if (Model.Interfaces.Length > 0)
    {
        interfaces = string.Join(",", Model.Interfaces);
        interfaces = ":" + interfaces;
    }
}
//generated by RSCG_Decorator, version @Model.Version
namespace @Model.nameSpace {
    partial class @newClassName @interfaces {
        private @Model.className original;
        public @newClassName (@Model.className original ){
            this.original=original;
        }
        //now decorate methods : @Model.methods.Length

@foreach (var p in Model.properties)
{
    <text>
        @p.PropertyCode()
    </text>
}
@foreach(var m in Model.methods)
{
    <text>
        /*
        @m.MethodName 
        */
        public @m.MethodDeclaration()
        {
        var @m.NameVariable =new RSCG_DecoratorCommon.MethodRecognizer("@Model.className","@m.MethodName");
        @(m.NameVariable).FileName="@m.FileName.Replace(@"\",@"\\")";
        @(m.NameVariable).Line=@m.Line;
        @foreach(var item in m.parameters)
        {
            <text>
            @(m.NameVariable).ValueTypeParameters.Add("@item", @item);
            </text>
        }
        using var mrUtils= new RSCG_DecoratorCommon.MRUtils(@m.NameVariable, original);
        try{
            @m.MethodCall()
        }
        catch(Exception ex){
        mrUtils.SendException(ex);
            throw;
        }
        
        }
        
    </text>
}

    }
}

